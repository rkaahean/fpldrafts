// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model FPLPlayer {
  id                                String             @id @default(uuid())
  player_id                         Int // the player_id = element from the JSON
  season_id                         String
  first_name                        String
  second_name                       String
  team                              Int // this is the team id. will change across seasons
  web_name                          String
  team_code                         Int
  element_type                      Int
  total_points                      Int
  goals_scored                      Int
  assists                           Int
  expected_goals                    Float
  expected_assists                  Float
  expected_goal_involvements        Float
  expected_goals_per_90             Float
  expected_assists_per_90           Float
  expected_goal_involvements_per_90 Float
  minutes                           Int
  now_value                         Int
  FPLGameweekPicks                  FPLGameweekPicks[]

  fpl_season                FPLSeason                @relation(fields: [season_id], references: [id])
  fpl_gameweek_player_stats FPLGameweekPlayerStats[]
  fpl_player_team           FPLPlayerTeam            @relation(fields: [team_code, season_id], references: [code, season_id])
  in_fpl_transfers          FPLGameweekTransfers[]   @relation("in_player")
  out_fpl_transfers         FPLGameweekTransfers[]   @relation("out_player")
  draft_transfer_out        FPLDraftTransfers[]      @relation("in_player")
  draft_transfer_in         FPLDraftTransfers[]      @relation("out_player")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([player_id, season_id])
  @@index([player_id])
  @@index([season_id, player_id])
  @@index([season_id])
  @@index([team, season_id])
}

model FPLPlayerTeam {
  id         String @id @default(uuid())
  season_id  String
  code       Int // this is the actual team code that likely reamins across seasons
  team_id    Int // this is the id (1-20). Usually used for sorting
  name       String
  short_name String
  strength   Int

  fpl_season    FPLSeason     @relation(fields: [season_id], references: [id])
  home_fixtures FPLFixtures[] @relation("home_team")
  away_fixtures FPLFixtures[] @relation("away_team")
  FPLPlayer     FPLPlayer[]

  @@unique([season_id, code])
  @@index([season_id])
  @@index([code, season_id])
  @@index([id, short_name])
}

model FPLFixtures {
  id                String  @id @default(uuid())
  season_id         String
  code              Int
  fixture_id        Int
  finished          Boolean
  team_h_id         String
  team_a_id         String
  event             Int
  team_h_score      Int?
  team_a_score      Int?
  team_h_difficulty Int
  team_a_difficulty Int

  fpl_season FPLSeason     @relation(fields: [season_id], references: [id])
  fpl_team_h FPLPlayerTeam @relation("home_team", fields: [team_h_id], references: [id])
  fpl_team_a FPLPlayerTeam @relation("away_team", fields: [team_a_id], references: [id])

  @@unique([season_id, code])
  @@index([season_id])
  @@index([team_h_id])
  @@index([team_a_id])
  @@index([season_id, team_h_id])
  @@index([season_id, team_a_id])
}

model FPLGameweekOverallStats {
  id                   String @id @default(uuid())
  fpl_team_id          String
  gameweek             Int
  bank                 Int
  value                Int
  points               Int
  total_points         Int
  gameweek_rank        Int?
  overall_rank         Int?
  event_transfers      Int
  event_transfers_cost Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([fpl_team_id, gameweek])
}

model FPLGameweekPicks {
  id              String    @id @default(uuid())
  fpl_team_id     String
  fpl_player_id   String
  gameweek        Int
  position        Int
  multiplier      Int
  is_captain      Boolean
  is_vice_captain Boolean
  // fpl team id is foreign key in FPL TEAM
  fpl_team        FPLTeam   @relation(fields: [fpl_team_id], references: [id])
  fpl_player      FPLPlayer @relation(fields: [fpl_player_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([fpl_team_id, gameweek, position])
}

// store fpl player stats on a gameweek level that have 
// been played so far
model FPLGameweekPlayerStats {
  id               String    @id @default(uuid())
  fpl_player_id    String
  fixture_id       Int
  gameweek         Int
  total_points     Int
  goals_scored     Int
  assists          Int
  expected_goals   Float
  expected_assists Float
  value            Int
  fpl_player       FPLPlayer @relation(fields: [fpl_player_id], references: [id])

  @@unique([fpl_player_id, fixture_id])
  @@index([fpl_player_id, value])
}

model FPLGameweekTransfers {
  id              String   @id @default(uuid())
  fpl_team_id     String
  in_player_id    String
  in_player_cost  Int
  out_player_id   String
  out_player_cost Int
  gameweek        Int
  time            DateTime

  in_fpl_player  FPLPlayer @relation("in_player", fields: [in_player_id], references: [id])
  out_fpl_player FPLPlayer @relation("out_player", fields: [out_player_id], references: [id])

  @@unique([in_player_id, out_player_id, time])
}

model FPLTeam {
  id            String @id @default(uuid())
  name          String
  team_id       Int
  user_id       String
  fpl_season_id String

  fpl_gameweek_picks FPLGameweekPicks[]
  fpl_season         FPLSeason          @relation(fields: [fpl_season_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model FPLSeason {
  id              String          @id @default(uuid())
  year            Int
  fpl_teams       FPLTeam[]
  fpl_players     FPLPlayer[]
  fpl_player_team FPLPlayerTeam[]
  fpl_fixtures    FPLFixtures[]
}

model FPLDrafts {
  id            String  @id @default(uuid())
  name          String
  description   String?
  fpl_team_id   String
  base_gameweek Int
  bank          Int

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now()) @updatedAt
  deletedAt         DateTime?
  FPLDraftTransfers FPLDraftTransfers[]
}

model FPLDraftTransfers {
  id            String    @id @default(uuid())
  fpl_draft_id  String
  player_in_id  String
  player_out_id String
  gameweek      Int
  in_cost       Int
  out_cost      Int
  fpl_draft     FPLDrafts @relation(fields: [fpl_draft_id], references: [id], onDelete: Cascade)

  in_fpl_player  FPLPlayer @relation("in_player", fields: [player_in_id], references: [id])
  out_fpl_player FPLPlayer @relation("out_player", fields: [player_out_id], references: [id])

  @@unique([fpl_draft_id, gameweek, player_in_id, player_out_id])
}

// Auth
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  fpl_teams     FPLTeam[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
